// Generated by CoffeeScript 1.5.0
(function() {
  var __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (!('Greed' in window)) {
    window.Greed = {};
  }

  (function(Greed) {
    var Deferred, PENDING, Promise, REJECTED, RESOLVED, flatten, gr, hasOwn, isArguments, isObservable, root;
    gr = Greed || {};
    PENDING = 'pending';
    RESOLVED = 'resolved';
    REJECTED = 'rejected';
    if (!Array.prototype.forEach) {
      throw new Error("Deferred requires Array.forEach");
    }
    root = this;
    hasOwn = function(obj, prop) {
      return obj != null ? obj.hasOwnProperty(prop) : void 0;
    };
    isArguments = function(obj) {
      return hasOwn(obj, 'length' && hasOwn(obj, 'callee'));
    };
    isObservable = function(obj) {
      return (obj instanceof Deferred) || (obj instanceof Promise);
    };
    flatten = function(array) {
      if (isArguments(array)) {
        return flatten(Array.prototype.slice.call(array));
      }
      if (!Array.isArray(array)) {
        return [array];
      }
      return array.reduce(function(memo, value) {
        if (Array.isArray(value)) {
          return memo.concat(flatten(value));
        }
        memo.push(value);
        return memo;
      }, []);
    };
    Promise = (function() {
      var _deferred;

      _deferred = null;

      function Promise(deferred) {
        this._deferred = deferred;
      }

      Promise.prototype.always = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        (_ref = this._deferred).always.apply(_ref, args);
        return this;
      };

      Promise.prototype.done = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        (_ref = this._deferred).done.apply(_ref, args);
        return this;
      };

      Promise.prototype.fail = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        (_ref = this._deferred).fail.apply(_ref, args);
        return this;
      };

      Promise.prototype.pipe = function(doneFilter, failFilter) {
        return this._deferred.pipe(doneFilter, failFilter);
      };

      Promise.prototype.state = function() {
        return this._deferred.state();
      };

      Promise.prototype.then = function(done, fail) {
        this._deferred.then(done, fail);
        return this;
      };

      return Promise;

    })();
    Deferred = (function() {
      var _storeCallback;

      _storeCallback = function(shouldExecuteNow, holder, args) {
        var functions,
          _this = this;
        if (args.length === 0) {
          return this;
        }
        functions = flatten(args);
        if (this._state === PENDING) {
          holder.push.apply(holder, functions);
        }
        if (shouldExecuteNow()) {
          functions.forEach(function(fn) {
            return fn.apply(_this._context, _this._withArguments);
          });
        }
        return this;
      };

      function Deferred(fn) {
        this.then = __bind(this.then, this);
        this.resolveWith = __bind(this.resolveWith, this);
        this.resolve = __bind(this.resolve, this);
        this.rejectWith = __bind(this.rejectWith, this);
        this.reject = __bind(this.reject, this);
        this.promise = __bind(this.promise, this);
        this.progress = __bind(this.progress, this);
        this.notifyWith = __bind(this.notifyWith, this);
        this.notify = __bind(this.notify, this);
        this.fail = __bind(this.fail, this);
        this.done = __bind(this.done, this);
        this.always = __bind(this.always, this);        this._state = PENDING;
        if (typeof fn === 'function') {
          fn.call(this, this);
        }
      }

      Deferred.prototype.always = function() {
        var args,
          _this = this;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _storeCallback.call(this, (function() {
          return _this._state !== PENDING;
        }), this._alwaysCallbacks || (this._alwaysCallbacks = []), args);
        return this;
      };

      Deferred.prototype.done = function() {
        var args,
          _this = this;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _storeCallback.call(this, (function() {
          return _this._state === RESOLVED;
        }), this._doneCallbacks || (this._doneCallbacks = []), args);
        return this;
      };

      Deferred.prototype.fail = function() {
        var args,
          _this = this;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _storeCallback.call(this, (function() {
          return _this._state === REJECTED;
        }), this._failCallbacks || (this._failCallbacks = []), args);
        return this;
      };

      Deferred.prototype.notify = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.notifyWith.apply(this, [root].concat(__slice.call(args)));
        return this;
      };

      Deferred.prototype.notifyWith = function() {
        var args, context, _ref;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this._state !== PENDING) {
          return this;
        }
        if ((_ref = this._progressCallbacks) != null) {
          _ref.forEach(function(fn) {
            return fn.apply(context, args);
          });
        }
        return this;
      };

      Deferred.prototype.pipe = function(doneFilter, failFilter) {
        var def;
        def = new Deferred();
        this.done(function() {
          var args, result, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (doneFilter != null) {
            result = doneFilter.apply(this, args);
            if (isObservable(result)) {
              return result.done(function() {
                var doneArgs, _ref;
                doneArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return (_ref = def.resolveWith).call.apply(_ref, [def, this].concat(__slice.call(doneArgs)));
              }).fail(function() {
                var failArgs, _ref;
                failArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return (_ref = def.rejectWith).call.apply(_ref, [def, this].concat(__slice.call(failArgs)));
              });
            } else {
              return def.resolveWith.call(def, this, result);
            }
          } else {
            return (_ref = def.resolveWith).call.apply(_ref, [def, this].concat(__slice.call(args)));
          }
        });
        this.fail(function() {
          var args, result, _ref, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (failFilter != null) {
            result = failFilter.apply(this, args);
            if (isObservable(result)) {
              result.done(function() {
                var doneArgs, _ref;
                doneArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return (_ref = def.resolveWith).call.apply(_ref, [def, this].concat(__slice.call(doneArgs)));
              }).fail(function() {
                var failArgs;
                failArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return def.rejectWith.apply(def, [def, this].concat(__slice.call(failArgs)));
              });
            } else {
              def.rejectWith.call(def, this, result);
            }
            return (_ref = def.rejectWith).call.apply(_ref, [def, this].concat(__slice.call(args)));
          } else {
            return (_ref1 = def.rejectWith).call.apply(_ref1, [def, this].concat(__slice.call(args)));
          }
        });
        return def.promise();
      };

      Deferred.prototype.progress = function() {
        var args, functions, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 0 || this._state !== PENDING) {
          return this;
        }
        functions = flatten(args);
        this._progressCallbacks || (this._progressCallbacks = []);
        (_ref = this._progressCallbacks).push.apply(_ref, functions);
        return this;
      };

      Deferred.prototype.promise = function() {
        return this._promise || (this._promise = new Promise(this));
      };

      Deferred.prototype.reject = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.rejectWith.apply(this, [root].concat(__slice.call(args)));
        return this;
      };

      Deferred.prototype.rejectWith = function() {
        var args, context, _ref, _ref1,
          _this = this;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this._state !== PENDING) {
          return this;
        }
        this._state = REJECTED;
        this._withArguments = args;
        this._context = context;
        if ((_ref = this._failCallbacks) != null) {
          _ref.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        if ((_ref1 = this._alwaysCallbacks) != null) {
          _ref1.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        return this;
      };

      Deferred.prototype.resolve = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.resolveWith.apply(this, [root].concat(__slice.call(args)));
        return this;
      };

      Deferred.prototype.resolveWith = function() {
        var args, context, _ref, _ref1,
          _this = this;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this._state !== PENDING) {
          return this;
        }
        this._state = RESOLVED;
        this._context = context;
        this._withArguments = args;
        if ((_ref = this._doneCallbacks) != null) {
          _ref.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        if ((_ref1 = this._alwaysCallbacks) != null) {
          _ref1.forEach(function(fn) {
            return fn.apply(_this._context, args);
          });
        }
        return this;
      };

      Deferred.prototype.state = function() {
        return this._state;
      };

      Deferred.prototype.then = function(doneCallbacks, failCallbacks, progressCallbacks) {
        if (doneCallbacks) {
          this.done(doneCallbacks);
        }
        if (failCallbacks) {
          this.fail(failCallbacks);
        }
        if (progressCallbacks) {
          this.progress(progressCallbacks);
        }
        return this;
      };

      return Deferred;

    })();
    Deferred.when = function() {
      var allDoneArgs, allReady, args, readyCount;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 0) {
        return new Deferred().resolve().promise();
      }
      if (args.length === 1) {
        return args[0].promise();
      }
      allReady = new Deferred();
      readyCount = 0;
      allDoneArgs = [];
      args.forEach(function(dfr, idx) {
        return dfr.done(function() {
          var doneArgs;
          doneArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          readyCount += 1;
          allDoneArgs[idx] = doneArgs;
          if (readyCount === args.length) {
            return allReady.resolve.apply(allReady, allDoneArgs);
          }
        }).fail(function() {
          var failArgs;
          failArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return allReady.rejectWith.apply(allReady, [this].concat(__slice.call(failArgs)));
        });
      });
      return allReady.promise();
    };
    gr.Deferred = Deferred;
  })(Greed);

}).call(this);
