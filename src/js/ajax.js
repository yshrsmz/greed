// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (!('Greed' in window)) {
    window.Greed = {};
  }

  (function(Greed) {
    var AjaxCore, emptyFunc, _doc, _g;
    _g = Greed || {};
    _doc = window.document;
    _g.activeAjaxCount = 0;
    _g.isAjaxActive = function() {
      return !!_g.activeAjaxCount;
    };
    emptyFunc = function() {};
    AjaxCore = (function() {

      function AjaxCore(url, options) {
        this._onReadyStateChange = __bind(this._onReadyStateChange, this);
        this.xhr = new XMLHttpRequest();
        this.url = url;
        this.options = options;
        this._deferred = new _g.Deferred();
        this.responseReceived = false;
        if (this._check()) {
          this._send();
        } else {
          this._deferred.rejectWith(this);
        }
        return this._deferred.promise();
      }

      AjaxCore.prototype.defaults = {
        url: '',
        type: 'POST',
        dataType: 'text',
        async: true,
        cache: false,
        data: null,
        contentType: 'application/x-www-form-urlencoded',
        success: null,
        error: null,
        complete: null,
        timeoutDuration: 60 * 1000,
        accepts: {
          text: 'text/plain',
          html: 'text/html',
          xml: 'application/xml, text/xml',
          json: 'application/json, text/javascript'
        }
      };

      AjaxCore.prototype._send = function() {
        var opts;
        opts = this.options;
        if (!opts.cache) {
          opts.url += (opts.url.indexOf('?') > -1 ? '&' : '?') + '_nocache=' + (new Date()).getTime();
        }
        if (opts.data) {
          if (opts.type === 'GET') {
            opts.url += (opts.url.indexOf('?') > -1 ? '&' : '?') + _g.serializeData(opts.data);
            opts.data = null;
          } else {
            opts.data = _g.serializeData(opts.data);
          }
        }
        this.xhr.open(opts.type, opts.url, opts.async);
        this.xhr.setRequestHeader('Content-type', opts.contentType);
        if (opts.dataType && opts.accepts[opts.dataType]) {
          this.xhr.setRequestHeader('Accept', opts.accepts[opts.dataType]);
        }
        _g.activeAjaxCount++;
        if (_g.is('Function', opts.success)) {
          this._deferred.done(opts.success);
        }
        if (_g.is('Function', opts.error)) {
          this._deferred.fail(opts.error);
        }
        if (_g.is('Function', opts.complete)) {
          this._deferred.always(opts.complete);
        }
        if (opts.async) {
          this.xhr.onreadystatechange = this._onReadyStateChange;
          this.xhr.send(opts.data);
        } else {
          this.xhr.send(opts.data);
          this._onReadyStateChange();
        }
        return this;
      };

      AjaxCore.prototype._check = function() {
        if (_g.is('Object', this.url)) {
          this.options = this.url;
          this.url = void 0;
        }
        this.options = _g.fillData(this.options || {}, this.defaults);
        if (!this.options.url && this.url) {
          this.options.url = this.url;
        }
        return !!this.options.url;
      };

      AjaxCore.prototype._onReadyStateChange = function() {
        var data, opts;
        opts = this.options;
        data = null;
        if (this.xhr.readyState === 4 && !this.responseReceived) {
          this.responseReceived = true;
          if (this.xhr.status >= 200 && this.xhr.status < 300 || this.xhr.status === 304) {
            data = opts.dataType === 'xml' ? this.xhr.responseXML : this.xhr.responseText;
            if (opts.dataType === 'json') {
              data = JSON.parse(data);
            }
            this._deferred.resolveWith(this, data, this.xhr.status, this.xhr);
          } else {
            this._deferred.rejectWith(this, data, this.xhr, this.xhr.status);
          }
          _g.activeAjaxCount--;
        }
      };

      return AjaxCore;

    })();
    _g.ajax = function(url, options) {
      return new _g.AjaxCore(url, options);
    };
    _g.ajaxJson = function(url, options) {
      options || (options = {});
      options.dataType = 'json';
      return new _g.AjaxCore(url, options);
    };
    _g.AjaxCore = AjaxCore;
  })(Greed);

}).call(this);
