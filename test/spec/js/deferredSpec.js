// Generated by CoffeeScript 1.4.0
(function() {

  describe("Deferred", function() {
    var prepareDeferred;
    prepareDeferred = function() {
      var deferred;
      deferred = new Greed.Deferred();
      return deferred;
    };
    it("Deferred should exist in Greed", function() {
      expect("Deferred" in window.Greed).toBe(true);
    });
    describe("Deferred methods", function() {
      var deferred;
      deferred = void 0;
      beforeEach(function() {
        deferred = new _g.Deferred();
      });
      it("always() is function", function() {
        expect("always" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.always)).toBe(true);
      });
      it("done() is function", function() {
        expect("done" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.done)).toBe(true);
      });
      it("fail() is function", function() {
        expect("fail" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.fail)).toBe(true);
      });
      it("pipe() is function", function() {
        expect("pipe" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.pipe)).toBe(true);
      });
      it("then() is function", function() {
        expect("then" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.then)).toBe(true);
      });
      it("when() is function", function() {
        expect("when" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.when)).toBe(true);
      });
      it("promise() is function", function() {
        expect("promise" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.promise)).toBe(true);
      });
      it("reject() is function", function() {
        expect("reject" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.reject)).toBe(true);
      });
      it("resolve() is function", function() {
        expect("resolve" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.resolve)).toBe(true);
      });
      it("rejectWith() is function", function() {
        expect("rejectWith" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.rejectWith)).toBe(true);
      });
      it("resolveWith() is function", function() {
        expect("resolveWith" in deferred).toBe(true);
        return expect(_g.is("Function", deferred.resolveWith)).toBe(true);
      });
    });
    describe("Deferred always behavior", function() {
      var alwaysSpyF, deferred, doneSpyF, failSpyF;
      deferred = void 0;
      alwaysSpyF = void 0;
      doneSpyF = void 0;
      failSpyF = void 0;
      beforeEach(function() {
        alwaysSpyF = jasmine.createSpy();
        doneSpyF = jasmine.createSpy();
        failSpyF = jasmine.createSpy();
        return deferred = new Greed.Deferred();
      });
      it("always callbacks should executed on resolve()", function() {
        deferred.always(alwaysSpyF);
        deferred.resolve();
        expect(alwaysSpyF).toHaveBeenCalled();
      });
      it("always callback should executed of reject()", function() {
        deferred.always(alwaysSpyF);
        deferred.reject();
        expect(alwaysSpyF).toHaveBeenCalled();
      });
      it("always callback and done callback should both executed on resolve", function() {
        deferred.always(alwaysSpyF);
        deferred.done(doneSpyF);
        deferred.fail(failSpyF);
        deferred.resolve();
        expect(alwaysSpyF).toHaveBeenCalled();
        expect(doneSpyF).toHaveBeenCalled();
        return expect(failSpyF).not.toHaveBeenCalled();
      });
      return;
      it("always callback and fail callback should both executed on reject", function() {
        deferred.always(alwaysSpyF);
        deferred.done(doneSpyF);
        deferred.fail(failSpyF);
        deferred.resolve();
        expect(alwaysSpyF).toHaveBeenCalled();
        expect(doneSpyF).not.toHaveBeenCalled();
        return expect(failSpyF).toHaveBeenCalled();
      });
    });
  });

}).call(this);
