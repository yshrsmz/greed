// Generated by CoffeeScript 1.4.0
(function() {

  describe("ajaxSettings", function() {
    var settings;
    settings = _g.AjaxCore.prototype.defaults;
    it("should 'POST' be default value of type", function() {
      expect(settings.type).toEqual("POST");
    });
    it("should empty string be default value of url", function() {
      expect(settings.url).toEqual("");
    });
    it("should null be default value of data", function() {
      expect(settings.data).toBeNull();
    });
    it("should 'text' be default value of dataType", function() {
      expect(settings.dataType).toBe("text");
    });
    it("should true be default value of async", function() {
      expect(settings.async).toBeTruthy();
    });
    it("should false be default value of cache", function() {
      expect(settings.cache).toBeFalsy();
    });
    it("should 'application/x-www-form-urlencoded' be default value of contentType", function() {
      expect(settings.contentType).toEqual("application/x-www-form-urlencoded");
    });
    it("should null be default value of success", function() {
      expect(settings.success).toBeNull();
    });
    it("should null be default value of error", function() {
      expect(settings.error).toBeNull();
    });
    it("should null be default value of complete", function() {
      expect(settings.complete).toBeNull();
    });
    it("should 60000 be default value of timeoutDuration", function() {
      expect(settings.timeoutDuration).toEqual(60000);
    });
    it("should accepts be same object with given", function() {
      var sample;
      sample = {
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      };
      expect(settings.accepts).toEqual(sample);
    });
  });

  describe("ajax", function() {
    var alwaysSpy, doneSpy, failSpy;
    doneSpy = void 0;
    failSpy = void 0;
    alwaysSpy = void 0;
    beforeEach(function() {
      doneSpy = jasmine.createSpy();
      failSpy = jasmine.createSpy();
      return alwaysSpy = jasmine.createSpy();
    });
    it("should return rejected Promise object, when called without arguments", function() {
      var promise;
      promise = _g.ajax();
      promise.done(doneSpy).fail(failSpy).always(alwaysSpy);
      expect(promise.constructor.name).toEqual("Promise");
      expect(promise.state()).toEqual("rejected");
      expect(doneSpy).not.toHaveBeenCalled();
      expect(failSpy).toHaveBeenCalled();
      expect(alwaysSpy).toHaveBeenCalled();
    });
    return it("should return pending Promise object, when called with url or parameter object", function() {
      var promise, serverResponse;
      serverResponse = null;
      promise = _g.ajax('/test/data/ajax_test.json');
      expect(promise.constructor.name).toEqual("Promise");
      promise.done(function(res) {
        doneSpy();
        return serverResponse = res;
      }).fail(failSpy).always(alwaysSpy);
      waitsFor(function() {
        return !!serverResponse;
      }, 'get server response', 2000);
      runs(function() {
        expect(doneSpy).toHaveBeenCalled();
        expect(failSpy).not.toHaveBeenCalled();
        return expect(alwaysSpy).toHaveBeenCalled();
      });
    });
  });

}).call(this);
