// Generated by CoffeeScript 1.5.0
(function() {

  describe("Greed", function() {
    it("should exist as global variable", function() {
      expect("Greed" in window).toBe(true);
    });
    it("gr is short hand for Greed, also exist as global variable", function() {
      expect("gr" in window).toBe(true);
    });
  });

  describe("gr.is(type, obj)", function() {
    var func;
    func = function(){};
    it("gr.is(): Object", function() {
      expect(gr.is("Object", new Object())).toBe(true);
      expect(gr.is("Object", {})).toBe(true);
      expect(gr.is("Object", func)).toBe(false);
      expect(gr.is("Object", [])).toBe(false);
      expect(gr.is("Object", "Greed")).toBe(false);
      expect(gr.is("Object", void 0)).toBe(false);
      expect(gr.is("Object", null)).toBe(false);
      expect(gr.is("Object", new Date())).toBe(false);
      expect(gr.is("Object", 1)).toBe(false);
      expect(gr.is("Object", window)).toBe(false);
    });
    it("gr.is(): Function", function() {
      expect(gr.is("Function", func)).toBe(true);
      expect(gr.is("Function", new Object())).toBe(false);
      expect(gr.is("Function", {})).toBe(false);
      expect(gr.is("Function", [])).toBe(false);
      expect(gr.is("Function", "Greed")).toBe(false);
      expect(gr.is("Function", void 0)).toBe(false);
      expect(gr.is("Function", null)).toBe(false);
      expect(gr.is("Function", new Date())).toBe(false);
      expect(gr.is("Function", 1)).toBe(false);
      expect(gr.is("Function", window)).toBe(false);
    });
    it("gr.is(): String", function() {
      expect(gr.is("String", "Greed")).toBe(true);
      expect(gr.is("String", func)).toBe(false);
      expect(gr.is("String", new Object())).toBe(false);
      expect(gr.is("String", {})).toBe(false);
      expect(gr.is("String", [])).toBe(false);
      expect(gr.is("String", void 0)).toBe(false);
      expect(gr.is("String", null)).toBe(false);
      expect(gr.is("String", new Date())).toBe(false);
      expect(gr.is("String", 1)).toBe(false);
      expect(gr.is("String", window)).toBe(false);
    });
    it("gr.is(): Number", function() {
      expect(gr.is("Number", 1)).toBe(true);
      expect(gr.is("Number", "Greed")).toBe(false);
      expect(gr.is("Number", func)).toBe(false);
      expect(gr.is("Number", new Object())).toBe(false);
      expect(gr.is("Number", {})).toBe(false);
      expect(gr.is("Number", [])).toBe(false);
      expect(gr.is("Number", void 0)).toBe(false);
      expect(gr.is("Number", null)).toBe(false);
      expect(gr.is("Number", new Date())).toBe(false);
      expect(gr.is("Number", window)).toBe(false);
    });
    it("gr.is(): Array", function() {
      expect(gr.is("Array", [])).toBe(true);
      expect(gr.is("Array", 1)).toBe(false);
      expect(gr.is("Array", "Greed")).toBe(false);
      expect(gr.is("Array", func)).toBe(false);
      expect(gr.is("Array", new Object())).toBe(false);
      expect(gr.is("Array", {})).toBe(false);
      expect(gr.is("Array", void 0)).toBe(false);
      expect(gr.is("Array", null)).toBe(false);
      expect(gr.is("Array", new Date())).toBe(false);
      expect(gr.is("Array", window)).toBe(false);
    });
  });

  describe("gr.hasClass()", function() {
    var testElement;
    testElement = void 0;
    beforeEach(function() {
      return testElement = sandbox({
        "class": 'foo bar'
      });
    });
    it("gr.hasClass() can tell whether or not given element has given class", function() {
      expect(gr.hasClass(testElement, "foo")).toBe(true);
      expect(gr.hasClass(testElement, "bar")).toBe(true);
      expect(gr.hasClass(testElement, "hoo")).toBe(false);
    });
    it("gr.hasClass() can take array of class as second argument", function() {
      expect(gr.hasClass(testElement, ["foo", "bar"])).toBe(true);
      expect(gr.hasClass(testElement, ["foo", "hoo"])).toBe(true);
      expect(gr.hasClass(testElement, ["hoo", "foo"])).toBe(true);
      expect(gr.hasClass(testElement, ["hoo", "var"])).toBe(false);
    });
    it("if 3rd argument is true, gr.hasClass() returns true only if the given element has all of the given classes", function() {
      expect(gr.hasClass(testElement, "foo", true)).toBe(true);
      expect(gr.hasClass(testElement, ["foo", "bar"], true)).toBe(true);
      expect(gr.hasClass(testElement, ["bar", "foo"], true)).toBe(true);
      expect(gr.hasClass(testElement, ["foo", "hoo"], true)).toBe(false);
      expect(gr.hasClass(testElement, ["hoo", "foo"], true)).toBe(false);
      expect(gr.hasClass(testElement, ["hoo", "var"], true)).toBe(false);
    });
  });

  describe("gr.addClass()", function() {
    var node;
    node = void 0;
    beforeEach(function() {
      return node = sandbox();
    });
    it("gr.addClass() adds given class to given element", function() {
      gr.addClass(node, "foo");
      return expect(node).toHaveClass("foo");
    });
    it("gr.addClass() can take array of class as second argument, and add those classes to given element", function() {
      gr.addClass(node, ['foo', 'bar']);
      expect(node.className).toEqual("foo bar");
    });
  });

  describe("gr.removeClass()", function() {
    var node;
    node = void 0;
    beforeEach(function() {
      return node = sandbox({
        "class": "foo bar"
      });
    });
    it("gr.removeClass() removes given class from given argument", function() {
      gr.removeClass(node, "foo");
      expect(node.className).toEqual("bar");
    });
    it("gr.removeClass() can take array of class as second argument, and reove those classes from given element", function() {
      gr.removeClass(node, ["foo", "bar"]);
      return expect(node.className).toEqual("");
    });
  });

  describe("gr.toggleClass()", function() {
    var node;
    node = void 0;
    beforeEach(function() {
      return node = sandbox();
    });
    it("gr.toggleClass() remove class from given element, if the class exists", function() {
      node.className = "foo";
      gr.toggleClass(node, "foo");
      expect(node.className).toEqual("");
      node.className = "foo bar";
      gr.toggleClass(node, "bar");
      expect(node.className).toEqual("foo");
    });
    return it("gr.toggleClass() adds class to given element, if the class does not exist", function() {
      gr.toggleClass(node, "foo");
      expect(node.className).toEqual("foo");
      node.className = "bar";
      gr.toggleClass(node, "foo");
      expect(node.className).toEqual("bar foo");
    });
  });

  describe("gr.fillData", function() {
    var answer, src1, src2, target;
    target = void 0;
    src1 = void 0;
    src2 = void 0;
    answer = void 0;
    beforeEach(function() {
      target = void 0;
      src1 = void 0;
      src2 = void 0;
      return answer = void 0;
    });
    it("should merge src into target object", function() {
      var result;
      target = {
        foo: true,
        bar: '1',
        hoo: 123,
        fuga: 'fuga'
      };
      src1 = {
        foo_1: false,
        bar_1: '2',
        hoo_1: 456,
        fuga_1: 'fuga_1'
      };
      answer = {
        foo: true,
        bar: '1',
        hoo: 123,
        fuga: 'fuga',
        foo_1: false,
        bar_1: '2',
        hoo_1: 456,
        fuga_1: 'fuga_1'
      };
      result = gr.fillData(target, src1);
      expect(result).toEqual(answer);
    });
    it("should merge multiple src into target, if given", function() {
      var result;
      target = {
        foo: true,
        bar: '1',
        hoo: 123,
        fuga: 'fuga'
      };
      src1 = {
        foo_1: false,
        bar_1: '2',
        hoo_1: 456,
        fuga_1: 'fuga_1'
      };
      src2 = {
        foo_2: false,
        bar_2: '3',
        hoo_2: 789,
        fuga_2: 'fuga_2'
      };
      answer = {
        foo: true,
        bar: '1',
        hoo: 123,
        fuga: 'fuga',
        foo_1: false,
        bar_1: '2',
        hoo_1: 456,
        fuga_1: 'fuga_1',
        foo_2: false,
        bar_2: '3',
        hoo_2: 789,
        fuga_2: 'fuga_2'
      };
      result = gr.fillData(target, src1, src2);
      expect(result).toEqual(answer);
    });
  });

}).call(this);
